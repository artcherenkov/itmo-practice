name: Deploy Node.js App

on:
  push:
    branches:
      - master

env:
  SERVER_USER: acherenkov                                     # Пользователь на сервере
  SERVER_IP: 130.193.45.25                                    # IP-адрес сервера
  PROJECT_DIR: /home/acherenkov/workspace/itmo-practice       # Директория проекта на сервере
  FRONTEND_DIR: /var/www/itmo-practice-frontend               # Путь для фронтенда на сервере
  NGINX_CONFIG_DIR: /etc/nginx/sites-available                # Директория конфигурации Nginx
  DOCKER_IMAGE: artcherenkov/itmo-practice-backend            # Имя Docker-образа для бэкенда

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Клонирование репозитория
      - name: Checkout repository
        uses: actions/checkout@v4

      # Шаг 2: Кэширование зависимостей фронтенда
      - name: Cache frontend dependencies
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Шаг 3: Сборка фронтенда
      - name: Build frontend
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: |
          cd frontend
          npm install
          VITE_API_BASE_URL=https://itmo-practice.acherenkov.tech npm run build

      # Шаг 4: Сборка и пуш Docker-образа
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }} ./backend
          docker push ${{ env.DOCKER_IMAGE }}

      # Шаг 5: Запуск SSH агента
      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Test SSH connection
        run: ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "echo 'SSH connection successful'"

      # Шаг 6: Копирование фронтенда на сервер
      - name: Deploy frontend
        run: |
          ssh ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "mkdir -p ${{ env.FRONTEND_DIR }}"
          scp -rC frontend/dist/* ${{ env.SERVER_USER }}@${{ env.SERVER_IP }}:${{ env.FRONTEND_DIR }}

      # Шаг 7: Копирование и активация конфигурации Nginx
      - name: Deploy Nginx configuration
        run: |
          scp nginx/itmo-practice.conf ${{ env.SERVER_USER }}@${{ env.SERVER_IP }}:/tmp/itmo-practice.conf
          ssh ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} << 'EOF'
            sudo mv /tmp/itmo-practice.conf ${{ env.NGINX_CONFIG_DIR }}/itmo-practice.conf
            sudo ln -sf ${{ env.NGINX_CONFIG_DIR }}/itmo-practice.conf /etc/nginx/sites-enabled/itmo-practice.conf
            sudo nginx -t && sudo systemctl restart nginx
          EOF

      # Шаг 8: Копирование docker-compose.yml на сервер
      - name: Copy docker-compose.yml
        run: |
          scp docker-compose.yml ${{ env.SERVER_USER }}@${{ env.SERVER_IP }}:${{ env.PROJECT_DIR }}/docker-compose.yml

      # Шаг 9: Перезапуск контейнеров с новым образом
      - name: Deploy backend with Docker Compose
        run: |
          ssh ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} << 'EOF'
            cd ${{ env.PROJECT_DIR }}
            docker compose down
            docker compose up -d
          EOF

      # Шаг 10: Проверка статуса сервисов
      - name: Check services status
        run: |
          ssh ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} << 'EOF'
            docker ps
            sudo systemctl status nginx
          EOF
